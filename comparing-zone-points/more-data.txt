
For s(x), calculate s(beta), the peak of D2. Then draw curve [s(x)*d/dx(s(x))]/s(beta)
Then calculate s(alpha), the peak of D4  Then draw curve d^2/dx^2 [s(x)*d/dx(s(x))]/s(alpha).
What then are the gamma and delta?

         alpha  D4(alph) beta   D2(beta) D4(delt) D2(gamma) D4(beta) D2(alpha)
erf     0.4478  -2.8144  0.6201  0.4759  0.2426    0.6501   -0.8583  0.9186                    
tanh    0.4213  -2.0429  0.6585  0.3847  0.1439    0.7075   -0.7536  0.8707          
p=2     0.3249  -2.3343  0.5774  0.3248  0.0902    0.7697   -0.626   0.8336        (.5774 sic, desmos)
exp*    0       -3       0.6931  1/4     0.0208    3/4      -1/6     0           
arctanXX0.3792  -1.7959  0.4119  0.7654  0.0568    0.8103   -0.503   0.7691     <- errors maybe! @@ unscaled?
arctan  0.3792  -1.2843  0.7654  0.3661           -0.3344   -0.1670           taken w.r.t arctan(x)*2/pi, s.t. (-1,1) span.
x-x^2*  0       -1.5     0.8453  0.3849  n/a       0        -0.5774  0            
xrootx* 0.6765  -14.718  0.8322  1.0992  0.08664   0.7463   -0.6429  0.8707        (0.3832, 21.964) lies on the curve. D2(0.3832) is 0.07981
gudder  0.2836  -2.706   0.4958  0.2805  0.1026    0.7360   -0.6531  0.8246

Here, we divided D2(x) by D2(beta) to normalize the peaks for further calculations of the other points,
and we divided D4(x) by D4(alpha) to normalize their peaks too for further calculations.
D4(alpha) is given after dividing by s(beta), s.t. s_modif(beta)=1.
Likewise, D4(delta) and D2(gamma) is calculated relative to dividing D4 by |s(alpha)|.

observations
- tanh and erf have the highest relative peaks s(delta), meaning stronger no-return
policy but stronger resistance up to that point. The others all demonstrate that
an increase in delta causes a decrease in s(delta) - but tanh and erf live above
that curve. Their deltas being high-valued also inhibits escaping weights better. 
- The others, not tanh and erf, show a gradual decline from their beta peaks. (Would
it be worthwhile adjusting the x values too?). tanh and erf die faster, relatively, 
(erf more so), meaning they have a sharper smaller Zone C where weights receive high
signal, whereas the others can pass more signal to weights farther from beta/Zone C.
(Zones. A:near 0 lineary; B:near alpha; C:near beta; D:before gamma; E:at gamma; F:
final peak near delta; G: point of no return and perpetual entrenchment)
- D2(gamma): % of max signal when drift is zero. D4(beta): noise forces strength at 
  signal mountaintop. D2(alpha): % of max signal when noise is at its own max.
- D2(gamma), or the amount of max possible signal that gets thru when noise is minimal,
is highest for arctan, lowest for erf, and similar for all (except x-x^2*).
(it follows: alpha is high in er    ....?
I guess this means that arctan is most likely to oscillate and has a error and noise 
tradeoff better? D2(alpha) concords with this, that at alpha=max noise point, the 
signal arctan is weaker than any nondegenerate ones, as does D4(beta), which reports 
that noise rate is relatively weak at this 100% signal strength spot.
=> with a fixed signal-to-noise ratio, you might expect arctan to put weights into
emergent competitive attractors between D4 and D2 forces, and if the SNR changes 
then arctan might change more than others would? arctan might also work better with
larger step sizes.
- erf and tanh both have more specialization as weight value increases - the predominant
dynamic at the special points supresses the other more. 
- p=2 might be more noise tolerant overall and comparatively especially with smaller 
weights. This might be due to its extensive signal response range, as indicated by its
small D2(beta) factor==multiplication factor of the integrand summing to 1 in the limit.
gudder is similar but less pronounced.
- disregarding xrootx*, which is zero until 0.2 and has unique dynamics, and somewhat
degenerate x-x^2* , arctan has the furthest-out beta. Maybe a slow ramp-up or alpha about 
half of beta contributes to it having a large raw strength in beta as well as extended,
with delta also far out. I guess it could be helpful maybe for v_i expected to have 
many large values and a need for large zones closer to equally sized.
- side observation: when exp* and p=1 are scaled to both's beta peaks align at (0.5,1),
p=1 unanimously decays faster than exp* does. By a lot!
- arctan: unlike tanh which when y=0 has D4 grow in magnitude larger than D2 after 1.317
(which is about 40% of the way between gamma and delta) or erf which has |D4| surpass |D2|
at 1.152 (also between gamma and delta), arctan has D2(delta) ~= 2.3 times D4(delta) and
they never cross. In fact, the ratio grows O(N^2). Also interestingly, for tanh, 
their ratio (ratio of D4/D2) approaches constant (4) while the ratio of erf approaches
D4(x)/D2(x) -> 4x^2. p=2 approaches 0 like arctan, as do all p values>1 (>0 too) and their
ratios grow O(N/p). Gudermann: O(1) ratio (->4). Exp*: ratio -> 1. Gudermannian function
has crossover, where |D4|>|D2| (ie, 0>D2>D4) as vi>0.9902 which is between gamma and delta,
when we use f(x)=arctan(tanh(x)). With the 2 factor, g(x)=2arctan(tanh(x/2)), the D2/D4
ratio approaches 1 and (therefore) there is no crossover; |vi|>gamma implies |D2|>|D4|.
p=1.6687 has ratio peak at 1 (at vi=1.7596) such that larger p have crossover and smaller
p do not; there can be multiple crossovers; and the crossover while always beyond
gamma also surpasses delta when p>1.775 approx. arctan(1.483*v_i) has crossover (and 
crossback) and the first crossover coincides with delta at arctan(1.545*v_i) or so.
The crossover/crossback pinch to the same point at (1.46, -.296); 1.48286


questions: 
- what is 0.5774 with regard to x^2 or sqrt(x)?
- is 0.8707 coincidence?
- does it make sense to make the zone b-c cutoff the point where SNR is 1?



More data for varying y.
As y \in [-1,1] (or more) changes, when do special points have interesting interactions?
Here, we identify two interactions for different sigmoidals: 
- There are certain y values that, when a sigm(v_i) approaches it as it should,
  the D4 noise can reach a relative peak, both locally wrt the D4 curve's extrema 
  as well as being high absolutely wrt other y. And while there is actually a
  bigger peak on the opposite signed side, corresponding to alpha, this peak
  overlaps strongly with the peak of the true signal D2.
- Regardless of y value, there are two fixed points (rot. symmetric about origin)
  of D4 - that is, the drift experienced by vi is the same here always. 
  Furthermore, there is a specific |y| that causes the maximal local D4 noise 
  peak to reach a minimum wrt y.
When sigma=tanh:
  - The zero of D2 (the point that receives no gradient from D2 signal)
    matches the 2nd-highest absolute peak of D4 at +/- 0.4714=v_i. 
    (ie, for this y value, v_i at this value are most at risk to D4 perturbances.)
    At this y value, D2_inverse(0)=0.512 (ie D4(.512)=0) and D4(0.5119)=1.711.
  - As y varies, D4 changes shape but does have two fixed points wrt y
    at (+/- 0.6585, +/- 1.5396). At y=+/-1.15470, the local peak of D4
    coincides with this point and achieves it smallest abs value of all y.
  - At y=0.7535, D2 and D4 intersect at (-1.15470, 0.5171). when y=-.7535,
    intersect at (1.15,-0.52) likewise. This is for raw unscaled versions:
    D2=(y-tanh)*D(tanh), D4=D(D(D2)). Notice that 0.6585 is beta.
  - It seems that for all y, alpha<beta<gamma(<delta) always @ tanh
When sigma=erf:
  - D4's fixed point w.r.t. y is (.7071, 1.9872). The y value that makes
    D4's local peak coincide with this point (a minimum wrt y) is 1.4086.
  - In contrast to tanh, the v_i coordinate of D4's fixed point wrt y is not 
    the same as beta, the peaks of D2 when y=0. The y that maximizes 
    D4 when D2=0 is 0.5503. Here, D2(0.535)=0 and D4(.535)=2.306.
Sigma is p=2:
  - (0.5, 1.8432) = (vi, vi/sqrt(1+vi^2)) is a D4 fixed point for all y.
    D4's local peak is this point when |y|=0.8497.
  - When y=0.3714, D2 has (0.4,0) and D4 here has (0.4, 1.9882).
Sigma is exp*: 
  - D4 have no common fixed points. In fact, for two different y values,
    D4(v_i; y) don't overlap/intersect at all.
  - Relatedly, there is no y value for which D2_inverse(0) maximixes
    D4 over y.
Arctan, not normalized, ie spans(-pi/2,pi/2) 
  - one of the two D4 fixed points over y is (0.5774, 1.4614). sic! 
        What is this number 0.5774!?
    y=+/-0.9566 is place which causes the D4 to has 
    its minimal-wrt-y peak be at that point.
  - unnormalized: |y|=0.4405 is where D2_inverse(0) hits the 
    local peak of D4; |D4(0.4717)|=1.5492
  - normalized (arctan(x*2/pi)): y=0.609 -> peaks D4 at (0.5774,0.5923).
  - normalized: |y|=0.2805 causes |D2_inverse(0)|=0.4715; 
    |D4(0.4715)|=0.6278

  Strange relationship: 
    The y value target that maximizes the relative local D4 noise
    coming from tanh is the same number as the vi weight-mod-x
    value that reaches the max relative noise peak from arctan.
    This number is 0.4714.

Other observations when varying y. 
As |y|->1 from below, alpha still stays near small values while
  beta, gamma, and delta escape to infinity. (duh.)
When y=0, the D4 noise within gamma is unhelpful, encouraging
  weights mod x to drift away from target value y. Then, beyond
  gamma, they are brought back in to the gamma attractor. This
  is relatively elementary to the analysis. But as |y| goes to 1,
  we instead observe the following (for now, wlog let y>0): 
  - As y surpasses the special values in the previous section,
    ie where y > D2_inv(0) = arg_localmax(D4), the noise starts
    actually helping and launches well-performing weights to 
    larger and larger values in the y direction, even if they
    are past the desired y value to be approached.
    That is, as y increases, the vi achieving y will receive
    less and less signal (with the region on the opposite side
    of y getting the strongest gradient in the right direction)
    BUT the D4 noise will not lessen the same amount; while gamma
    goes to infinity, alpha (the peak of D4) increases *slower*
    than y or sigma_inverse(y) such that the noise signal stays
    yielding extremifying signals to accurate vi.
  Actually these values are a little different, maybe: 
    consider recording data for the y that intersects alpha
    or the y that intersects the largest ratio or difference 
    between D2 and D4, each of which will give indications
    of what the D4 noise does to vi.
  - On the other side, ie if y>0 then near -y/3 or so, the
    signals from both D2 and D4 get stronger but overall
    stay in vaguely similar places (unlike how D2 drops to zero
    once the function is correct but D4 doesn't.)
    The competitive interactions between D2 and D4 will change
    the numbers but not really the overall tendency for 
    D4 and D2 to cause some weights to settle to actual fixed
    points on the other side of the objective y (e.g. if tanh
    and D4=D2 contributions unscaled, then values below 0.133
    will be sent to -0.745). Even if the D2 signal is several 
    times stronger than the noise (~5x stronger), there can 
    still be slipstreams in strange places. * actually, when
    y=0, slipstreams overtake attractors when D2>8*D4 and 
    when y=1 slipstreams overtake attractors when D2>2.5*D4;
    when D2=4*D4, y>0.35 makes slipstreams instead of attractors.
    When D2>2*D4, then the attractors will all lie on the 
    side vi<0 -- ie there's a fixed point wrt y @ D2-D4 
    competitive net influence on weights. Similar with {p=2}, 
    just the numbers a little fudged (e.g. for no attractors,
    need D2>10*D4). When erf, same D2=8*D4 @ y=0 and D2=3*D4 @ y=1 
    and D2=2*D4 (exact) makes attractors appear only at vi<0.
    arctan not too different. 
    exp* clearly different but still can get D2-D4-competition-derived 
    attractors when y=/=0.
    For all nonlinearities (i think), as y increases from 0, D2
    at vi=sigma_inverse(y) grows faster than vi=D4_inverse(y) ie
    when y>0, both D2 and D4 will be >0 at the objective point y
    (causing, always, unproductive drift in the extremifying 
    direction). And for all as y increases, D2+D4 will be
    negative only if the SNR is very high. And since if d/dx at 0
    is 1 and that is its maximum, then all D2(vi; y) for all y>0
    is always greater than than zero causing outward drift.

    OK takeaways: Neither D2 nor D4 can create ideal behavior
    of vi's when |y|>0. As y gets closer to 1, you can permit
    more noise to prevent attractors from forming on the 
    opposite side from y. These basins are large, extending from -inf to
    up to even positive values, but don't extend rightward too much and
    can be tamed kinda. With a high enough SNR (ie D2 contributions
    instead of D4), you can prevent attractors from forming altogether,
    and this SNR varies slightly per nonlinearity. For certain
    y in between 0 and 1 (often around 0.4-0.7), the D4 noise will 
    be rather very strong and will launch weights with any noise
    sensitivity well beyond y even when they calculate y exactly.
    Gamma scales much faster than y and so there's no help there 
    to be found. 
    For a given y target (ie, all the data with that label)
    and a given nonlinearity, you might be able to estimate SNR by 
    identifying vi attractors on the opposite side (sign) of y
    or even by identifying slipstreams / weight fluxes / 
    instantaneous densities.





What is this 0.5774? It appears as p=2's beta, x-x^2's D4(beta), and
the vi for which arctan's D4 is fixed w.r.t. changing y.

for reference
'''         name        alpha  beta   gamma  delta     '''
dl.append( {'tanh':    [0.421, 0.658, 1.146, 1.572] } )
dl.append( {'erf':     [0.488, 0.620, 1.076, 1.456] } )
dl.append( {'p=2':     [0.325, 0.577, 1.000, 1.376] } )
dl.append( {'exp*':    [0.001, 0.693, 1.386, 2.079] } )
dl.append( {'arctan':  [0.379, 0.765, 1.330, 1.847] } )
dl.append( {'Guder':   [0.284, 0.496, 0.877, 1.228] } )
dl.append( {'p=1':     [0.001, 0.500, 1.000, 1.500] } )
dl.append( {'p=1.5':   [0.161, 0.543, 1.000, 1.432] } )
dl.append( {'p=4.37':  [0.680, 0.681, 1.000, 1.228] } )
dl.append( {'x-x^2*':  [0.000, 0.845, 2.000, None ] } )
dl.append( {'xrootx*': [0.676, 0.832, 1.158, 1.462] } )
dl.append( {'xrootx2': [0.298, 0.561, 1.000, 1.419] } )
dl.append( {'relu':    [0    , 0    , 0    , 0    ] } )




f(x) = (y_i-f(x))*D(f)(x) with algebraic manipulations 
can become D(f)(x)= 1/[ 1/(yf(x)) -1 ]
( solution: ... -(1/y)*(yx+log(1-yx)) which basically looks like
my halfexp that goes to y=-x as x<<0 and y=e^x as x>>0, but with
the exponential on the negative part (via log) instead of on positive 
part; y=1 => plot is -x-logx ~= -x when x<0 and asymptote at x=1 )
which inspires a new nonlinear sigmoidal: odd extension of 
{ 1/(1+1/x) | x>=0 }. This has a/b/g/d: 
0(-inf) / 0.5(.148) / 1(0) / 0.5(.031)
Altering to 1/(1+x^-a), a>1 yields alpha finite
a=1.5: * there are extra zeros at 0 and +/- 0.26 *
.505, .862, 1.438, 1.979
a=2: .752, 1, 1.51, 1.972; xtra zero: .486, xtra peak: .213
(get an xrootx* shape that flattens near 0)


